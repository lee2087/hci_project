
package musicpackage;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.input.*;
import javafx.scene.layout.*;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.paint.Color;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.util.Callback;

import java.io.*;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class MediaApp extends Application
{
    private ObservableList<String> library;
    private ObservableList<String> playlist;
    private VBox mainBox;
    private int index = 0;
    private MediaPlayer currentSongPlayer;
    private MusicControl musicController;
    private boolean libraryOrPlaylist = false; //if false play from library, else play from playlist

    private ListView<String> libraryListView;
    private ListView<String> playlistListView;

    public static void main(String[] args) {
        launch(args);
    }

    /* Builds the library list and the adjacent playlist. */
    private void buildGUI(VBox root) {
        BorderPane bpane = new BorderPane();
        GridPane gridpane = new GridPane();

        gridpane.setPadding(new Insets(5));
        gridpane.setHgap(10);
        gridpane.setVgap(10);
        ColumnConstraints column1 = new ColumnConstraints(150, 150,
                Double.MAX_VALUE);
        ColumnConstraints column2 = new ColumnConstraints(65);
        ColumnConstraints column3 = new ColumnConstraints(150, 150,
                Double.MAX_VALUE);
        column1.setHgrow(Priority.ALWAYS);
        column3.setHgrow(Priority.ALWAYS);
        gridpane.getColumnConstraints().addAll(column1, column2, column3);

        Label libraryLbl = new Label("Music Library");
        GridPane.setHalignment(libraryLbl, HPos.CENTER);
        gridpane.add(libraryLbl, 0, 0);

        Label playlistLbl = new Label("Playlist");
        gridpane.add(playlistLbl, 2, 0);
        GridPane.setHalignment(playlistLbl, HPos.CENTER);

        library = FXCollections.observableArrayList();
        libraryListView = new ListView<>(library);
        gridpane.add(libraryListView, 0, 1);

        playlist = FXCollections.observableArrayList();
        playlistListView = new ListView<>(playlist);
        gridpane.add(playlistListView, 2, 1);

        addListenersAndRenders(root, libraryListView, playlistListView);

        Button sendRightButton = new Button("\u2192");
        sendRightButton.setOnAction(event -> {
            String potential = libraryListView.getSelectionModel()
                    .getSelectedItem();
            if (potential != null && !playlist.contains(potential)) {
                libraryListView.getSelectionModel().clearSelection();
                playlist.add(potential);
            }
        });

        Button sendLeftButton = new Button("\u2190");

        sendLeftButton.setOnAction(event -> {
            String s = playlistListView.getSelectionModel().getSelectedItem();
            if (s != null && !library.contains(s)) {
                playlistListView.getSelectionModel().clearSelection();
                playlist.remove(s);
                library.add(s);
            }
        });

        VBox playlistButtonBox = new VBox(5);
        playlistButtonBox.setAlignment(Pos.CENTER);
        playlistButtonBox.getChildren().addAll(sendRightButton, sendLeftButton);

        gridpane.add(playlistButtonBox, 1, 1);
        bpane.setCenter(gridpane);

        GridPane.setVgrow(bpane, Priority.ALWAYS);

        root.getChildren().add(bpane);
    }

    /* Contains the Listeners and Renders for the lists */
    private void addListenersAndRenders(VBox root, ListView<String> libraryListView, ListView<String> playlistListView) {
        libraryListView.setCellFactory(new Callback<ListView<String>, ListCell<String>>()
        {
            @Override
            public ListCell<String> call(ListView<String> param) {
                return new getSongName();
            }
        });
        playlistListView.setCellFactory(new Callback<ListView<String>, ListCell<String>>() {
            @Override
            public ListCell<String> call(ListView<String> param) {
                return new getSongName();
            }
        });

        libraryListView.setOnDragDetected(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                if(libraryListView.getSelectionModel().getSelectedItem() == null)
                    return;

                Dragboard dragboard = libraryListView.startDragAndDrop(TransferMode.MOVE);
                ClipboardContent content = new ClipboardContent();
                content.putString(libraryListView.getSelectionModel().getSelectedItem());
                dragboard.setContent(content);
            }
        });

        playlistListView.setOnDragOver(new EventHandler<DragEvent>() {
            @Override
            public void handle(DragEvent dragEvent) {
                dragEvent.acceptTransferModes(TransferMode.MOVE);
            }
        });

        playlistListView.setOnDragDropped(new EventHandler<DragEvent>() {
            @Override
            public void handle(DragEvent dragEvent) {
                String song = dragEvent.getDragboard().getString();
                if(playlistListView.getItems().contains(song))
                    return;
                playlistListView.getItems().addAll(song);
                dragEvent.setDropCompleted(true);
            }
        });

        libraryListView.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent click) {
                if(library.isEmpty())
                    return;

                if(click.getClickCount() == 2) {
                    libraryOrPlaylist = false;
                    int selectedSong = libraryListView.getSelectionModel().getSelectedIndex();
                    play(root, selectedSong, library);
                    index = libraryListView.getSelectionModel().getSelectedIndex();
                }
            }
        });

        playlistListView.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent click) {
                if(playlist.isEmpty())
                    return;

                if(click.getClickCount() == 2)
                {
                    libraryOrPlaylist = true;
                    int selectedSong = playlistListView.getSelectionModel().getSelectedIndex();
                    index = playlistListView.getSelectionModel().getSelectedIndex();
                    play(root, selectedSong, playlist);
                }
            }
        });

    }

    /* Loads and plays a new song. */
    private void play(VBox root, int index, ObservableList<String> location) {

        System.out.println("gIndex " + index + " library: " + libraryListView.getSelectionModel().getSelectedIndex());
        /* Stop the currently playing song (if applicable) and remove the player from the stage. */
        musicController.getPlayer().stop();
        root.getChildren().remove(musicController);

        /* Re-initialize the mediaPlayer and MusicControl objects with the new song. */
        currentSongPlayer = new MediaPlayer(new Media(new File(location.get(index)).toURI().toString()));
        currentSongPlayer.setAutoPlay(true);
        musicController = new MusicControl(currentSongPlayer, this);

        if(!libraryOrPlaylist) {
            buildPlayer(root, library, libraryListView, playlistListView);
            playlistListView.getSelectionModel().clearSelection();
            libraryListView.getSelectionModel().select(index);
        }
        else {
            buildPlayer(root, playlist, playlistListView, libraryListView);
            libraryListView.getSelectionModel().clearSelection();
            playlistListView.getSelectionModel().select(index);
        }

        /* Add the MusicControl object back to the stage. */
        root.getChildren().add(musicController);

    }

    public void playPrev()
    {
        index--;
        if (index < 0)
        {
            if(!libraryOrPlaylist)
                index = library.size() - 1;
            else
                index = playlist.size() - 1;
        }
        if(!libraryOrPlaylist)
            play(mainBox, index, library);
        else
            play(mainBox, index, playlist);
    }

    public void playNext()
    {
        index++;
        if(!libraryOrPlaylist) {
            index %= library.size();
            play(mainBox, index % library.size(), library);
        }
        else {
            index %= playlist.size();
            play(mainBox, index % playlist.size(), playlist);
        }
    }

    /* builds a player based on the source of the music, wether it be the library or the playlist */
    private void buildPlayer(VBox root, ObservableList<String> location, ListView<String> selected, ListView<String> other)
    {
        musicController.getPlayer().setOnEndOfMedia(new Runnable() {
            @Override
            public void run() {
                musicController.getPlayer().stop();
                if (musicController.repeat()) {
                    musicController.getPlayer().seek(musicController.getPlayer().getStartTime());
                }
                else
                {
                    if(musicController.autoPlay())
                    {
                        musicController.getPlayButton().setText("â–¶");
                        musicController.setStopRequested(true);
                        musicController.setAtEndOfMedia(true);

                        index++;
                        if(index >= location.size() && musicController.repeat())
                        {
                            index = index % location.size();
                            play(root, index, location);
                            other.getSelectionModel().clearSelection();
                            selected.getSelectionModel().select(index);
                        }
                        else if(index >= location.size() && !musicController.repeat()) {
                            index--;
                            musicController.getPlayButton().setText("â–¶");
                        }
                        else if (index < location.size())
                        {
                            play(root, index, location);
                            other.getSelectionModel().clearSelection();
                            selected.getSelectionModel().select(index);
                        }
                    }
                    else {
                        musicController.getPlayButton().setText("â–¶");
                    }
                }
            }
        });
    }

    /* Builds the menu bar at the top of the window. */
    private void buildMenuBar(VBox root, Stage primaryStage) {
        /* Add a Menu Bar with some basic options. */
        MenuBar menuBar = new MenuBar();

        Menu fileMenu = new Menu("File");
        Menu viewMenu = new Menu("Themes");
        menuBar.getMenus().addAll(fileMenu,viewMenu);
        root.getChildren().add(menuBar);


        /* Basic Menu Items for the "File" Menu. */
        MenuItem addFile = new MenuItem("\u2669 Add File to Library");
        MenuItem addFolder = new MenuItem("\u266B Add Folder to Library");
        MenuItem importPlaylist = new MenuItem("\u266A Import Playlist");
        MenuItem exportPlaylist = new MenuItem("\u266C Export Playlist");
        fileMenu.getItems().addAll(addFile, addFolder, importPlaylist, exportPlaylist);

        /*Menu Items for the "View" Menu. */
        MenuItem defaultMode = new MenuItem("Default Mode");
        MenuItem darkMode = new MenuItem("Dark Mode");
        MenuItem vwMode = new MenuItem("A E S T H E T I C");
        viewMenu.getItems().addAll(defaultMode, darkMode, vwMode);

        /* FileChooser for selecting a file. */
        FileChooser fileChooser = new FileChooser();

        /* Listener for adding a song to the library. */
        addFile.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent e) {
                fileChooser.setTitle("Open Music File");

                //Set file extension filter
                FileChooser.ExtensionFilter extFilter =
                        new FileChooser.ExtensionFilter("Audio Files (*.mp3), (*.wma), (*.wav), (*.m4a)", "*.mp3", "*.wma", "*.wav", "*.m4a");
                fileChooser.getExtensionFilters().add(extFilter);

                File musicFile = fileChooser.showOpenDialog(primaryStage);

                if(library.contains(musicFile.getAbsolutePath()))
                    return;

                library.add(musicFile.getAbsolutePath());
                index = library.size() - 1;
                play(root, library.size() - 1, library);
            }
        });

        /* Listener for adding a folder of songs to the library. */
        addFolder.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent e) {

                DirectoryChooser folderChooser = new DirectoryChooser();
                folderChooser.setTitle("Select a folder");
                File selectedFolder = folderChooser.showDialog(primaryStage);
                File[] songsInFolder = selectedFolder.listFiles();

                if(songsInFolder.length == 0)
                    return;

                List<String> extensions = Arrays.asList("(.mp3)","(.wma)","(.m4a)",".mp3",".wma","(.wav)",".wav",".m4a");
                for(File song: songsInFolder)
                {
                    String path = song.getAbsolutePath();
                    if(extensions.contains(path.substring(path.lastIndexOf('.'))))
                        library.add(path);
                }
            }
        });

        /* Listener for importing playlists */
        importPlaylist.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                fileChooser.setTitle("Import playlist");

                //Set file extension filter
                FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("*.vn","*vn");
                fileChooser.getExtensionFilters().add(extFilter);

                File plfile = fileChooser.showOpenDialog(primaryStage);

                try {
                    FileReader fr = new FileReader(plfile);
                    BufferedReader br = new BufferedReader(fr);
                    String line;
                    while((line = br.readLine()) != null)
                        playlist.add(line);
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        /* Listener for exporting playlists to a file */
        exportPlaylist.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event)
            {
                if(playlist.isEmpty())
                {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error");
                    alert.setHeaderText("Current Playlist does not contain files");
                    alert.setContentText("Please add files to the playlist");
                    alert.showAndWait();
                }
                else
                {
                    String filename;
                    TextInputDialog dialog = new TextInputDialog("playlist");
                    dialog.setTitle("Playlist File Name");
                    dialog.setHeaderText("Please Enter the Name of Your Playlist");
                    Optional<String> result = dialog.showAndWait();
                    if(result.isPresent())
                    {
                        filename = result.get();
                        filename += ".vn";
                        File file = new File(filename);

                        try {
                            file.createNewFile();
                            FileWriter fw = new FileWriter(file);
                            for (String s : playlist)
                            {
                                fw.write(s + "\n");
                            }
                            fw.flush();
                            fw.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });

        darkMode.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                File f = new File("DankMode.css");
                primaryStage.getScene().setFill(Color.rgb(45,45,45));
                primaryStage.getScene().getStylesheets().clear();
                primaryStage.getScene().getStylesheets().add("file:src/musicpackage/DankMode.css");
            }
        });

        defaultMode.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                File f = new File("DefaultMode.css");
                primaryStage.getScene().setFill(Color.WHITE);
                primaryStage.getScene().getStylesheets().clear();
                primaryStage.getScene().getStylesheets().add("file:src/musicpackage/DefaultMode.css");
            }
        });

        vwMode.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                File f = new File("vaporwave.css");
                primaryStage.getScene().setFill(Color.HOTPINK);
                primaryStage.getScene().getStylesheets().clear();
                primaryStage.getScene().getStylesheets().add("file:src/musicpackage/vaporwave.css");
            }
        });
    }

    @Override
    public void start(Stage primaryStage) throws Exception {


        /* Setting up basic stuff for the window. */
        primaryStage.setTitle("Totally Not Google Play Music");
        mainBox = new VBox();
        mainBox.getStyleClass().add("vbox");
        primaryStage.getIcons().add(new Image("file:icon.jpeg"));

        final Scene scene = new Scene(mainBox, 1000, 650);

        File f = new File("DefaultMode.css");
        scene.setFill(Color.WHITE);
        scene.getStylesheets().add("file:src/musicpackage/DefaultMode.css");

        /* Builds the initial media player/media player controller. */
        currentSongPlayer = new MediaPlayer(new Media(new File("src/musicpackage/Silence.mp3").toURI().
                toString()));
        currentSongPlayer.setAutoPlay(false);
        musicController = new MusicControl(currentSongPlayer, this);

        /* Creates the music list and playlist view to the stage. */
        buildMenuBar(mainBox, primaryStage);
        buildGUI(mainBox);

        /* Adds the default MediaPlayer to the stage. */
        mainBox.getChildren().add(musicController);

        scene.setRoot(mainBox);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /* CellFactory for the lists to display only the song title */
    static class getSongName extends ListCell<String> {
        @Override
        public void updateItem(String item, boolean empty)
        {
            super.updateItem(item, empty);
            setText(item == null ? "" : item.substring(item.lastIndexOf('\\')+1, item.lastIndexOf('.')));
        }
    }

}
