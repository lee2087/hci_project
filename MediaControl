
package musicpackage;

import javafx.application.Platform;
import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.MapChangeListener;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.geometry.VPos;
import javafx.scene.control.*;
import javafx.scene.effect.Reflection;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaPlayer.Status;
import javafx.util.Duration;


public class MediaControl extends BorderPane
{
    private MediaApp ma;
    private MediaPlayer mp;
    private Button playButton;
    private boolean stopRequested = false;
    private boolean atEndOfMedia = false;
    private Duration duration;
    private Slider timeSlider;
    private Label playTime;
    private CheckBox repeatBox;
    private CheckBox autoPlayBox;
    private Slider volumeSlider;
    private HBox mediaBar;
    private GridPane info;
    private Label artist;
    private Label album;
    private Label title;
    private Label year;
    private ImageView albumCover;

    public MediaControl(final MediaPlayer mp, MediaApp ma) {
        this.mp = mp;
        this.ma = ma;
        setId("mediaControl");

        // Set up the media bar containing the controls
        mediaBar = new HBox();

        mediaBar.setAlignment(Pos.CENTER);
        mediaBar.setPadding(new Insets(5, 10, 5, 10));
        BorderPane.setAlignment(mediaBar, Pos.CENTER);

        // Add a back button
        final Button backButton = new Button("\u2590\u25C0");
        mediaBar.getChildren().add(backButton);

        // Add a play button
        playButton = new Button("\u25B6");
        mediaBar.getChildren().add(playButton);

        // Add a forwards button
        final Button forwardsButton = new Button("\u25B6\u258C");
        mediaBar.getChildren().add(forwardsButton);

        // Add spacer
        Label spacer = new Label("   ");
        spacer.setMaxWidth(Double.MAX_VALUE);
        mediaBar.getChildren().add(spacer);

        // Add a time label
        Label timeLabel = new Label("Time: ");
        timeLabel.setMinWidth(Control.USE_PREF_SIZE);
        mediaBar.getChildren().add(timeLabel);

        // Add a time slider
        timeSlider = new Slider();
        timeSlider.setMaxWidth(Double.MAX_VALUE);
        timeSlider.setMinWidth(50);
        HBox.setHgrow(timeSlider, Priority.ALWAYS);
        timeSlider.valueProperty().addListener(new InvalidationListener() {

            @Override
            public void invalidated(Observable ov) {
                if (timeSlider.isValueChanging()) {
                    // multiply duration by percentage calculated by slider position
                    if (duration != null) {
                        mp.seek(duration.multiply(timeSlider.getValue() / 100.0));
                    }
                    updateValues();
                }
            }
        });
        mediaBar.getChildren().add(timeSlider);

        // Add a play label
        playTime = new Label();
        playTime.setPrefWidth(130);
        playTime.setMinWidth(50);
        mediaBar.getChildren().add(playTime);

        // Add a volume label
        Label volumeLabel = new Label("Vol: ");
        volumeLabel.setMinWidth(Control.USE_PREF_SIZE);
        mediaBar.getChildren().add(volumeLabel);

        // Add a volume slider
        volumeSlider = new Slider();
        volumeSlider.setPrefWidth(70);
        volumeSlider.setMaxWidth(Region.USE_PREF_SIZE);
        volumeSlider.setMinWidth(30);
        volumeSlider.valueProperty().addListener(new ChangeListener<Number>() {

            @Override
            public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
                if (volumeSlider.isValueChanging()) {
                    mp.setVolume(volumeSlider.getValue() / 100.0);
                }
            }
        });
        mediaBar.getChildren().add(volumeSlider);


        GridPane settings = new GridPane();
        setRight(settings);
        settings.setMinWidth(100);

        // Add a repeat label
        Label repeatLabel = new Label("Repeat: ");
        repeatLabel.setPrefWidth(100);
        repeatLabel.setMinWidth(50);
        settings.add(repeatLabel, 0, 0);
        // Add a repeat checkbox
        repeatBox = new CheckBox();
        repeatBox.setSelected(true);
        settings.add(repeatBox, 1, 0);

        // Add an autoPlay label
        Label autoPlayLabel = new Label("AutoPlay: ");
        autoPlayLabel.setPrefHeight(100);
        autoPlayLabel.setMinWidth(50);
        settings.add(autoPlayLabel, 0 , 1);
        // Add an autoPlay checkbox
        autoPlayBox = new CheckBox();
        autoPlayBox.setSelected(true);
        settings.add(autoPlayBox, 1, 1);

        backButton.setOnAction(new EventHandler<ActionEvent>() {

            public void handle(ActionEvent e) {
                ma.playPrev();
            }
        });

        playButton.setOnAction(new EventHandler<ActionEvent>() {

            public void handle(ActionEvent e) {
                updateValues();
                Status status = mp.getStatus();

                if (status == Status.UNKNOWN
                        || status == Status.HALTED) {
                    System.out.println("Player is in a bad or unknown state, can't play.");
                    return;
                }

                if (status == Status.PAUSED
                        || status == Status.READY
                        || status == Status.STOPPED) {

                    if (atEndOfMedia) {
                        mp.seek(mp.getStartTime());
                        atEndOfMedia = false;
                        playButton.setText("▶");
                        updateValues();
                    }
                    mp.play();
                    playButton.setText("\u275A\u275A");
                } else {
                    mp.pause();
                }
            }
        });

        forwardsButton.setOnAction(new EventHandler<ActionEvent>() {

            public void handle(ActionEvent e)
            {
                ma.playNext();
            }
        });

        mp.currentTimeProperty().addListener(new InvalidationListener() {

            @Override
            public void invalidated(Observable ov) {
                updateValues();
            }
        });

        mp.setOnPlaying(new Runnable() {

            public void run() {
                if (stopRequested) {
                    mp.pause();
                    stopRequested = false;
                } else {
                    playButton.setText("❚❚");
                }
            }
        });

        mp.setOnPaused(new Runnable() {

            public void run() {
                playButton.setText("▶");
            }
        });

        mp.setOnReady(new Runnable() {

            public void run() {
                duration = mp.getMedia().getDuration();
                updateValues();
            }
        });
        setBottom(mediaBar);


        final Reflection reflect = new Reflection();
        reflect.setFraction(0.2);
        info = new GridPane();
        artist = new Label();
        album = new Label();
        title = new Label();
        year = new Label();

        albumCover = new ImageView();
        albumCover.setFitWidth(120);
        albumCover.setPreserveRatio(true);
        albumCover.setSmooth(true);
        albumCover.setEffect(reflect);

        info.add(albumCover, 0, 0, 1, GridPane.REMAINING);
        info.add(title, 1, 0);
        info.add(artist, 1, 1);
        info.add(album, 1, 2);
        info.add(year, 1, 3);

        info.setPadding(new Insets(10));
        info.setHgap(20);

        final ColumnConstraints c0 = new ColumnConstraints();
        final ColumnConstraints c1 = new ColumnConstraints();
        c1.setHgrow(Priority.ALWAYS);
        info.getColumnConstraints().addAll(c0, c1);

        final RowConstraints r0 = new RowConstraints();
        r0.setValignment(VPos.TOP);
        info.getRowConstraints().addAll(r0, r0, r0, r0);

        mp.getMedia().getMetadata().addListener(new MapChangeListener<String, Object>()
        {
            @Override
            public void onChanged(Change<? extends String, ? extends Object> ch) {
                if (ch.wasAdded()) {
                    handleMetadata(ch.getKey(), ch.getValueAdded());
                }
            }
        });
        setCenter(info);
    }

    private void handleMetadata(String key, Object value) {
        if (key.equals("album")) {
            album.setText(value.toString());
        } else if (key.equals("artist")) {
            artist.setText(value.toString());
        } if (key.equals("title")) {
            title.setText(value.toString());
        } if (key.equals("year")) {
            year.setText(value.toString());
        } if (key.equals("image")) {
            albumCover.setImage((Image)value);
        }
    }

    public MediaPlayer getPlayer(){
        return mp;
    }

    public Button getPlayButton() {
        return playButton;
    }

    public boolean repeat() {
        return repeatBox.isSelected();
    }

    public boolean autoPlay(){
        return autoPlayBox.isSelected();
    }

    public void setStopRequested(boolean bool) {
        stopRequested = bool;
    }

    public void setAtEndOfMedia(boolean bool) {
        atEndOfMedia = bool;
    }

    protected void updateValues() {
        if (playTime != null && timeSlider != null && volumeSlider != null) {
            Platform.runLater(new Runnable() {

                public void run() {
                    Duration currentTime = mp.getCurrentTime();
                    playTime.setText(formatTime(currentTime, duration));
                    timeSlider.setDisable(duration.isUnknown());
                    if (!timeSlider.isDisabled() && duration.greaterThan(Duration.ZERO) && !timeSlider.isValueChanging()) {
                        timeSlider.setValue(currentTime.divide(duration.toMillis()).toMillis() * 100.0);
                    }
                    if (!volumeSlider.isValueChanging()) {
                        volumeSlider.setValue((int) Math.round(mp.getVolume() * 100));
                    }
                }
            });
        }
    }

    @Override
    protected double computeMinWidth(double height) {
        return mediaBar.prefWidth(-1);
    }

    @Override
    protected double computeMinHeight(double width) {
        return 200;
    }

    @Override
    protected double computePrefWidth(double height) {
        return Math.max(mp.getMedia().getWidth(), mediaBar.prefWidth(height));
    }

    @Override
    protected double computePrefHeight(double width) {
        return mp.getMedia().getHeight() + mediaBar.prefHeight(width);
    }

    @Override
    protected double computeMaxWidth(double height) {
        return Double.MAX_VALUE;
    }

    @Override
    protected double computeMaxHeight(double width) {
        return Double.MAX_VALUE;
    }

    /* for use in the time remaining label */
    private static String formatTime(Duration elapsed, Duration duration) {
        int intElapsed = (int) Math.floor(elapsed.toSeconds());
        int elapsedHours = intElapsed / (60 * 60);
        if (elapsedHours > 0) {
            intElapsed -= elapsedHours * 60 * 60;
        }
        int elapsedMinutes = intElapsed / 60;
        int elapsedSeconds = intElapsed - elapsedHours * 60 * 60 - elapsedMinutes * 60;

        if (duration.greaterThan(Duration.ZERO)) {
            int intDuration = (int) Math.floor(duration.toSeconds());
            int durationHours = intDuration / (60 * 60);
            if (durationHours > 0) {
                intDuration -= durationHours * 60 * 60;
            }
            int durationMinutes = intDuration / 60;
            int durationSeconds = intDuration - durationHours * 60 * 60 - durationMinutes * 60;

            if (durationHours > 0) {
                return String.format("%d:%02d:%02d/%d:%02d:%02d",
                        elapsedHours, elapsedMinutes, elapsedSeconds,
                        durationHours, durationMinutes, durationSeconds);
            } else {
                return String.format("%02d:%02d/%02d:%02d",
                        elapsedMinutes, elapsedSeconds,
                        durationMinutes, durationSeconds);
            }
        } else {
            if (elapsedHours > 0) {
                return String.format("%d:%02d:%02d",
                        elapsedHours, elapsedMinutes, elapsedSeconds);
            } else {
                return String.format("%02d:%02d",
                        elapsedMinutes, elapsedSeconds);
            }
        }
    }
}
